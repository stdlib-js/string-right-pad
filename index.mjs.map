{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert-is-nonnegative-integer';\nimport { isPrimitive as isString } from '@stdlib/assert-is-string';\nimport format from '@stdlib/string-format';\nimport FLOAT64_MAX_SAFE_INTEGER from '@stdlib/constants-float64-max-safe-integer';\nimport base from '@stdlib/string-base-right-pad';\n\n\n// MAIN //\n\n/**\n* Right pads a string such that the padded string has a length of at least `len`.\n*\n* @param {string} str - string to pad\n* @param {NonNegativeInteger} len - minimum string length\n* @param {string} [pad=' '] - string used to pad\n* @throws {TypeError} first argument must be a string\n* @throws {TypeError} second argument must be a nonnegative integer\n* @throws {TypeError} third argument must be a string\n* @throws {RangeError} padding must have a length greater than `0`\n* @returns {string} padded string\n*\n* @example\n* var str = rpad( 'a', 5 );\n* // returns 'a    '\n*\n* @example\n* var str = rpad( 'beep', 10, 'p' );\n* // returns 'beeppppppp'\n*\n* @example\n* var str = rpad( 'beep', 12, 'boop' );\n* // returns 'beepboopboop'\n*/\nfunction rpad( str, len, pad ) {\n\tvar p;\n\tif ( !isString( str ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a string. Value: `%s`.', str ) );\n\t}\n\tif ( !isNonNegativeInteger( len ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a nonnegative integer. Value: `%s`.', len ) );\n\t}\n\tif ( arguments.length > 2 ) {\n\t\tp = pad;\n\t\tif ( !isString( p ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Third argument must be a string. Value: `%s`.', p ) );\n\t\t}\n\t\tif ( p.length === 0 ) {\n\t\t\tthrow new RangeError( 'invalid argument. Pad string must not be an empty string.' );\n\t\t}\n\t} else {\n\t\tp = ' ';\n\t}\n\tif ( len > FLOAT64_MAX_SAFE_INTEGER ) {\n\t\tthrow new RangeError( format( 'invalid argument. Output string length exceeds maximum allowed string length. Value: `%u`.', len ) );\n\t}\n\treturn base( str, len, p );\n}\n\n\n// EXPORTS //\n\nexport default rpad;\n"],"names":["rpad","str","len","pad","p","isString","TypeError","format","isNonNegativeInteger","arguments","length","RangeError","FLOAT64_MAX_SAFE_INTEGER","base"],"mappings":";;sgBAuDA,SAASA,EAAMC,EAAKC,EAAKC,GACxB,IAAIC,EACJ,IAAMC,EAAUJ,GACf,MAAM,IAAIK,UAAWC,EAAQ,kEAAmEN,IAEjG,IAAMO,EAAsBN,GAC3B,MAAM,IAAII,UAAWC,EAAQ,gFAAiFL,IAE/G,GAAKO,UAAUC,OAAS,EAAI,CAE3B,IAAML,EADND,EAAID,GAEH,MAAM,IAAIG,UAAWC,EAAQ,kEAAmEH,IAEjG,GAAkB,IAAbA,EAAEM,OACN,MAAM,IAAIC,WAAY,4DAEzB,MACEP,EAAI,IAEL,GAAKF,EAAMU,EACV,MAAM,IAAID,WAAYJ,EAAQ,6FAA8FL,IAE7H,OAAOW,EAAMZ,EAAKC,EAAKE,EACxB"}