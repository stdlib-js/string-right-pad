{"version":3,"file":"index.mjs","sources":["../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport { isPrimitive as isNonNegativeInteger } from '@stdlib/assert-is-nonnegative-integer' ;\nimport { isPrimitive as isString } from '@stdlib/assert-is-string' ;\nimport repeat from '@stdlib/string-repeat' ;\nimport ceil from '@stdlib/math-base-special-ceil' ;\nimport format from '@stdlib/error-tools-fmtprodmsg' ;\nimport FLOAT64_MAX_SAFE_INTEGER from '@stdlib/constants-float64-max-safe-integer' ;\n\n\n// MAIN //\n\n/**\n* Right pads a string such that the padded string has a length of at least `len`.\n*\n* @param {string} str - string to pad\n* @param {NonNegativeInteger} len - minimum string length\n* @param {string} [pad=' '] - string used to pad\n* @throws {TypeError} first argument must be a string\n* @throws {TypeError} second argument must be a nonnegative integer\n* @throws {TypeError} third argument must be a string\n* @throws {RangeError} padding must have a length greater than `0`\n* @returns {string} padded string\n*\n* @example\n* var str = rpad( 'a', 5 );\n* // returns 'a    '\n*\n* @example\n* var str = rpad( 'beep', 10, 'p' );\n* // returns 'beeppppppp'\n*\n* @example\n* var str = rpad( 'beep', 12, 'boop' );\n* // returns 'beepboopboop'\n*/\nfunction rpad( str, len, pad ) {\n\tvar n;\n\tvar p;\n\tif ( !isString( str ) ) {\n\t\tthrow new TypeError( format( '0hX3R', str ) );\n\t}\n\tif ( !isNonNegativeInteger( len ) ) {\n\t\tthrow new TypeError( format( '0hX3k', len ) );\n\t}\n\tif ( arguments.length > 2 ) {\n\t\tp = pad;\n\t\tif ( !isString( p ) ) {\n\t\t\tthrow new TypeError( format( '0hXB6', p ) );\n\t\t}\n\t\tif ( p.length === 0 ) {\n\t\t\tthrow new RangeError( format( '0hX1g' ) );\n\t\t}\n\t} else {\n\t\tp = ' ';\n\t}\n\tif ( len > FLOAT64_MAX_SAFE_INTEGER ) {\n\t\tthrow new RangeError( format( '0hXB7', len ) );\n\t}\n\tn = ( len - str.length ) / p.length;\n\tif ( n <= 0 ) {\n\t\treturn str;\n\t}\n\tn = ceil( n );\n\treturn str + repeat( p, n );\n}\n\n\n// EXPORTS //\n\nexport default rpad;\n"],"names":["rpad","str","len","pad","n","p","isString","TypeError","format","isNonNegativeInteger","arguments","length","RangeError","FLOAT64_MAX_SAFE_INTEGER","ceil","repeat"],"mappings":";;4kBAwDA,SAASA,EAAMC,EAAKC,EAAKC,GACxB,IAAIC,EACAC,EACJ,IAAMC,EAAUL,GACf,MAAM,IAAIM,UAAWC,EAAQ,QAASP,IAEvC,IAAMQ,EAAsBP,GAC3B,MAAM,IAAIK,UAAWC,EAAQ,QAASN,IAEvC,GAAKQ,UAAUC,OAAS,EAAI,CAE3B,IAAML,EADND,EAAIF,GAEH,MAAM,IAAII,UAAWC,EAAQ,QAASH,IAEvC,GAAkB,IAAbA,EAAEM,OACN,MAAM,IAAIC,WAAYJ,EAAQ,SAEjC,MACEH,EAAI,IAEL,GAAKH,EAAMW,EACV,MAAM,IAAID,WAAYJ,EAAQ,QAASN,IAGxC,OADAE,GAAMF,EAAMD,EAAIU,QAAWN,EAAEM,SACnB,EACFV,GAERG,EAAIU,EAAMV,GACHH,EAAMc,EAAQV,EAAGD,GACzB"}